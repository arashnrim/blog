---
import UnstyledAnchor from "@components/UnstyledAnchor.astro";
import { Icon } from "astro-icon/components";
import type { CollectionEntry } from "astro:content";
import { getEntries } from "astro:content";

type Topic = CollectionEntry<"topics">;
interface Props {
  entry: CollectionEntry<"posts">;
}

const { entry } = Astro.props;
const topics: Topic[] | undefined = await getEntries(entry.data.topics || []);
---

<div class="post__metadata">
  <div>
    <Icon name="solar:calendar-bold-duotone" />
    <span>
      {
        new Date(
          entry.data.updatedDate || entry.data.publishedDate
        ).toLocaleDateString("en-SG", {
          day: "numeric",
          month: "long",
          year: "numeric",
        })
      }
      {
        entry.data.updatedDate && (
          <span class="post__original-date">
            {`(first published ${new Date(
              entry.data.publishedDate
            ).toLocaleDateString("en-SG", {
              day: "numeric",
              month: "long",
              year: "numeric",
            })})`}
          </span>
        )
      }</span
    >
  </div>
  <div>
    <Icon name="solar:tag-bold-duotone" />
    <span class="post__tags">
      {
        topics &&
          topics.map((topic) => (
            <UnstyledAnchor href={`/topics/${topic.id}`}>
              <span class="badge">{topic.data.name}</span>
            </UnstyledAnchor>
          ))
      }
    </span>
  </div>
</div>

<style>
  .post__metadata > *:not(:first-child) {
    margin-top: 0.5em;
  }

  .post__metadata > div {
    display: flex;
    align-items: center;
    gap: 0.5em;
  }

  .post__original-date {
    color: #8a8a8a;
  }

  .post__tags {
    display: flex;
    flex-wrap: wrap;
    gap: 0.5em;
  }

  .badge {
    border: 1px solid #1f1f1f;
    transition:
      border 0.2s,
      background-color 0.2s;
  }

  .badge:hover {
    border: 1px solid white;
  }

  .badge:not(:first-child) {
    margin-left: 0.5em;
  }
</style>
